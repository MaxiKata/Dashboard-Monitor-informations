{% extends "base.html.twig" %}

{% block title %}Registration{% endblock %}
{% block body %}
    <div style="display: none">
        {% block h1 %}Registration{% endblock %}
        {% if is_granted('IS_AUTHENTICATED_FULLY') and app.user.sheet != null %}
            <div id="sheet_id" data-sheet-id="{{ app.user.sheet.spreadSheetId }}"></div>
            <div id="sheet_range" data-sheet-range="{{ app.user.sheet.rangeSheet }}"></div>
        {% endif %}
    </div>
    {{ form_start(form, {'attr': {'novalidate': 'novalidate', 'class': 'container text-center'}}) }}
        {{ form_widget(form) }}
    <button class="btn btn-success mt-3" type="submit">
        Sign up
    </button>
    {{ form_end(form) }}
{% endblock %}
{% if is_granted('IS_AUTHENTICATED_FULLY') %}
    {% block javascripts %}
        <script
                src="https://code.jquery.com/jquery-3.4.1.min.js"
                integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
                crossorigin="anonymous"></script>
        {{ encore_entry_script_tags('app') }}
        <script>
            function makeApiCall() {
                let sheetId    = $('#sheet_id').data('sheet-id');
                let sheetRange = $('#sheet_range').data('sheet-range');

                var params = {
                    // The ID of the spreadsheet to retrieve data from.
                    spreadsheetId: sheetId,  // TODO: Update placeholder value.

                    // The A1 notation of the values to retrieve.
                    range: sheetRange,  // TODO: Update placeholder value.

                    // How values should be represented in the output.
                    // The default render option is ValueRenderOption.FORMATTED_VALUE.
                    //valueRenderOption: '',  // TODO: Update placeholder value.

                    // How dates, times, and durations should be represented in the output.
                    // This is ignored if value_render_option is
                    // FORMATTED_VALUE.
                    // The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
                    //dateTimeRenderOption: '',  // TODO: Update placeholder value.
                };

                var request = gapi.client.sheets.spreadsheets.values.get(params);
                request.then(function(response) {
                    // TODO: Change code below to process the `response` object:
                    console.log(response.result);
                    populateSheet(response.result);
                }, function(reason) {
                    console.error('error: ' + reason.result.error.message);
                });
            }

            function initClient() {
                var API_KEY = '';  // TODO: Update placeholder with desired API key.

                var CLIENT_ID = '';  // TODO: Update placeholder with desired client ID.

                // TODO: Authorize using one of the following scopes:
                //   'https://www.googleapis.com/auth/drive'
                //   'https://www.googleapis.com/auth/drive.file'
                //   'https://www.googleapis.com/auth/drive.readonly'
                //   'https://www.googleapis.com/auth/spreadsheets'
                //   'https://www.googleapis.com/auth/spreadsheets.readonly'
                var SCOPE = 'https://www.googleapis.com/auth/spreadsheets.readonly';

                gapi.client.init({
                    'apiKey': API_KEY,
                    'clientId': CLIENT_ID,
                    'scope': SCOPE,
                    'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4'],
                }).then(function() {
                    gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
                    updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
                });
            }

            function handleClientLoad() {
                gapi.load('client:auth2', initClient);
            }

            function updateSignInStatus(isSignedIn) {
                if (isSignedIn) {
                    makeApiCall();
                }
            }

            function handleSignInClick(event) {
                gapi.auth2.getAuthInstance().signIn();
            }

            function handleSignOutClick(event) {
                gapi.auth2.getAuthInstance().signOut();
            }

            function populateSheet(result){
                if(result.values.length === 1){
                    $('.twitter').append("<p>There is no news yet</p>");
                } else {
                    for( var row = (result.values.length) - 1; row >= 1; row--){
                        for( var col = 0; col < 6; col++){
                            if(col === 4)
                                $('.twitter').append(result.values[row][col])
                        }
                    }
                }
            }
        </script>
        <script async defer src="https://apis.google.com/js/api.js"
                onload="this.onload=function(){};handleClientLoad()"
                onreadystatechange="if (this.readyState === 'complete') this.onload()">
        </script>
    {% endblock %}
{% endif %}